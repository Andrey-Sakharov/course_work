import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;

public class Main {

    private static final String API_KEY = "5eaca587fd2cb84d1686dcdd7de05039";
    private static final Map<String, WeatherData> savedWeather = new HashMap<>();

    static class WeatherData {
        String city;
        String description;
        double temperature;
        double feelsLike;
        int humidity;
        double windSpeed;

        public WeatherData(String city, String description, double temperature,
                           double feelsLike, int humidity, double windSpeed) {
            this.city = city;
            this.description = description;
            this.temperature = temperature;
            this.feelsLike = feelsLike;
            this.humidity = humidity;
            this.windSpeed = windSpeed;
        }

        public String toFormattedString() {
            return String.format(
                    "üåÜ –ü–æ–≥–æ–¥–∞ –≤ %s: %s\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C\nü•∂ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: %.1f¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%\nüí® –í–µ—Ç–µ—Ä: %.1f –º/—Å",
                    city, description, temperature, feelsLike, humidity, windSpeed
            );
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n=== –ú–µ–Ω—é ===");
            System.out.println("1. –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞");
            System.out.println("3. –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏");
            System.out.println("4. –í—ã–π—Ç–∏");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
            String input = scanner.nextLine().trim();

            switch (input) {
                case "1" -> fetchAndDisplayWeather(scanner);
                case "2" -> showSaved();
                case "3" -> deleteCity(scanner);
                case "4" -> {
                    System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.");
                    return;
                }
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }

    private static void fetchAndDisplayWeather(Scanner scanner) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö): ");
        String city = scanner.nextLine().trim();

        if (city.isEmpty()) {
            System.out.println("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏:");
            List<String> popularCities = List.of("–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å");
            for (int i = 0; i < popularCities.size(); i++) {
                System.out.printf("%d. %s%n", i + 1, popularCities.get(i));
            }
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞: ");
            try {
                int choice = Integer.parseInt(scanner.nextLine().trim());
                if (choice >= 1 && choice <= popularCities.size()) {
                    city = popularCities.get(choice - 1);
                } else {
                    System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
                    return;
                }
            } catch (NumberFormatException e) {
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
                return;
            }
        }

        WeatherData data = fetchWeather(city);
        if (data != null) {
            savedWeather.put(city.toLowerCase(), data);
            System.out.println(data.toFormattedString());
        } else {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.");
        }
    }

    private static WeatherData fetchWeather(String city) {
        try {
            String encodedCity = city.replace(" ", "%20");
            String urlStr = String.format(
                    "http://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&units=metric&lang=ru",
                    encodedCity, API_KEY
            );

            URL url = new URL(urlStr);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            if (conn.getResponseCode() != 200) return null;

            InputStream input = conn.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(input));
            StringBuilder json = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) json.append(line);
            reader.close();

            return parseJsonManually(json.toString(), city);

        } catch (Exception e) {
            System.out.println("‚ö† –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + e.getMessage());
            return null;
        }
    }

    private static WeatherData parseJsonManually(String json, String city) {
        try {
            String description = extractValue(json, "\"description\":\"", "\"");
            String tempStr = extractValue(json, "\"temp\":", ",}");
            String feelsLikeStr = extractValue(json, "\"feels_like\":", ",}");
            String humidityStr = extractValue(json, "\"humidity\":", ",}");
            String windSpeedStr = extractValue(json, "\"speed\":", ",}");

            double temp = Double.parseDouble(tempStr);
            double feelsLike = Double.parseDouble(feelsLikeStr);
            int humidity = Integer.parseInt(humidityStr);
            double windSpeed = Double.parseDouble(windSpeedStr);

            return new WeatherData(
                    capitalize(city),
                    capitalize(description),
                    temp,
                    feelsLike,
                    humidity,
                    windSpeed
            );

        } catch (Exception e) {
            System.out.println("‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " + e.getMessage());
            return null;
        }
    }

    private static String extractValue(String json, String key, String endChars) {
        int start = json.indexOf(key);
        if (start == -1) return "";
        start += key.length();
        int end = json.length();
        for (char c : endChars.toCharArray()) {
            int tempEnd = json.indexOf(c, start);
            if (tempEnd != -1 && tempEnd < end) {
                end = tempEnd;
            }
        }
        return json.substring(start, end).replaceAll("[^\\d.-]", "");
    }

    private static void showSaved() {
        if (savedWeather.isEmpty()) {
            System.out.println("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.");
        } else {
            for (WeatherData data : savedWeather.values()) {
                System.out.println("\n" + data.toFormattedString());
            }
        }
    }

    private static void deleteCity(Scanner scanner) {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
        String city = scanner.nextLine().trim().toLowerCase();
        if (savedWeather.remove(city) != null) {
            System.out.println("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.");
        } else {
            System.out.println("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }

    private static String capitalize(String s) {
        return s.isEmpty() ? s : s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();
    }
}
